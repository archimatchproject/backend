"""
Middleware to inject pagination parameters from headers into the request's query parameters.

This middleware extracts the page number and page size from the request headers and injects them
into the request's query parameters. This allows pagination to be handled uniformly based on
these query parameters, facilitating easier implementation of paginated responses in views.
"""


class PaginationMiddleware:
    """
    Middleware to inject pagination parameters from headers into query parameters.

    This middleware intercepts incoming HTTP requests, extracts pagination information from
    specific headers ('X-Page-Number' and 'X-Page-Size'), and adds these values to the request's
    query parameters. This enables views to handle pagination based on these parameters.
    """

    def __init__(self, get_response):
        """
        Initialize the middleware with the next callable in the middleware chain.

        Args:
            get_response (callable): The next middleware or view in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Process the request and inject pagination parameters if present.

        This method is called for each request. It checks for 'X-Page-Number' and 'X-Page-Size'
        headers, and if found, it injects these values into the request's query parameters.

        Args:
            request (HttpRequest): The incoming HTTP request.

        Returns:
            HttpResponse: The response generated by the next middleware or view.
        """
        # Extract page number and page size from headers
        page_number = request.headers.get("X-Page-Number")
        page_size = request.headers.get("X-Page-Size")

        # If they are present, inject them into query parameters
        if page_number and page_size:
            query_params = request.GET.copy()
            query_params["page"] = page_number
            query_params["page_size"] = page_size
            request.GET = query_params

        # Proceed with the request
        response = self.get_response(request)
        return response
