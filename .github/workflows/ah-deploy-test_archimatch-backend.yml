name: Build and deploy Python app to Azure Web App - archimatch-backend

on:
  push:
    branches:
      - AH/deploy-test
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v1
        with:
          python-version: '3.12'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_498163494BA545CA8C5146578A1A4BE9 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6E2CE7086E9A40409A2686FB956FD792 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_B0906A40E53142ABBC753305A55C9B78 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'archimatch-backend'
          slot-name: 'Production'

      - name: Set up Supervisor
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p logs

          # Start Supervisor
          supervisord -c ./supervisord.conf

      - name: Ensure Supervisor is enabled and started
        run: |
          sudo systemctl enable supervisor
          sudo systemctl start supervisor
